"""
This type stub file was generated by pyright.
"""

import sys
from typing import Any, Optional

__author__ = 'tylin'
__version__ = '2.0'
PYTHON_VERSION = sys.version_info[0]
if PYTHON_VERSION == 2:
    ...
else:
    ...
def _isArrayLike(obj):
    ...

class COCO:
    def __init__(self, annotation_file: Optional[Any] = ...):
        """
        Constructor of Microsoft COCO helper class for reading and visualizing annotations.
        :param annotation_file (str): location of annotation file
        :param image_folder (str): location to the folder that hosts images.
        :return:
        """
        ...
    
    def createIndex(self):
        self.anns = ...
        self.imgToAnns = ...
        self.catToImgs = ...
        self.imgs = ...
        self.cats = ...
    
    def info(self):
        """
        Print information about the annotation file.
        :return:
        """
        ...
    
    def getAnnIds(self, imgIds=..., catIds=..., areaRng=..., iscrowd: Optional[Any] = ...):
        """
        Get ann ids that satisfy given filter conditions. default skips that filter
        :param imgIds  (int array)     : get anns for given imgs
               catIds  (int array)     : get anns for given cats
               areaRng (float array)   : get anns for given area range (e.g. [0 inf])
               iscrowd (boolean)       : get anns for given crowd label (False or True)
        :return: ids (int array)       : integer array of ann ids
        """
        ...
    
    def getCatIds(self, catNms=..., supNms=..., catIds=...):
        """
        filtering parameters. default skips that filter.
        :param catNms (str array)  : get cats for given cat names
        :param supNms (str array)  : get cats for given supercategory names
        :param catIds (int array)  : get cats for given cat ids
        :return: ids (int array)   : integer array of cat ids
        """
        ...
    
    def getImgIds(self, imgIds=..., catIds=...):
        '''
        Get img ids that satisfy given filter conditions.
        :param imgIds (int array) : get imgs for given ids
        :param catIds (int array) : get imgs with all given cats
        :return: ids (int array)  : integer array of img ids
        '''
        ...
    
    def loadAnns(self, ids=...):
        """
        Load anns with the specified ids.
        :param ids (int array)       : integer ids specifying anns
        :return: anns (object array) : loaded ann objects
        """
        ...
    
    def loadCats(self, ids=...):
        """
        Load cats with the specified ids.
        :param ids (int array)       : integer ids specifying cats
        :return: cats (object array) : loaded cat objects
        """
        ...
    
    def loadImgs(self, ids=...):
        """
        Load anns with the specified ids.
        :param ids (int array)       : integer ids specifying img
        :return: imgs (object array) : loaded img objects
        """
        ...
    
    def showAnns(self, anns):
        """
        Display the specified annotations.
        :param anns (array of object): annotations to display
        :return: None
        """
        ...
    
    def loadRes(self, resFile):
        """
        Load result file and return a result api object.
        :param   resFile (str)     : file name of result file
        :return: res (obj)         : result api object
        """
        ...
    
    def download(self, tarDir: Optional[Any] = ..., imgIds=...):
        '''
        Download COCO images from mscoco.org server.
        :param tarDir (str): COCO results directory name
               imgIds (list): images to be downloaded
        :return:
        '''
        ...
    
    def loadNumpyAnnotations(self, data):
        """
        Convert result data from a numpy array [Nx7] where each row contains {imageID,x1,y1,w,h,score,class}
        :param  data (numpy.ndarray)
        :return: annotations (python nested list)
        """
        ...
    
    def annToRLE(self, ann):
        """
        Convert annotation which can be polygons, uncompressed RLE to RLE.
        :return: binary mask (numpy 2D array)
        """
        ...
    
    def annToMask(self, ann):
        """
        Convert annotation which can be polygons, uncompressed RLE, or RLE to binary mask.
        :return: binary mask (numpy 2D array)
        """
        ...
    


