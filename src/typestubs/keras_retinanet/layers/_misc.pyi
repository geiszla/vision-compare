"""
This type stub file was generated by pyright.
"""

import keras
from typing import Any, Optional

"""
Copyright 2017-2018 Fizyr (https://fizyr.com)

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
class Anchors(keras.layers.Layer):
    """ Keras layer for generating achors for a given shape.
    """
    def __init__(self, size, stride, ratios: Optional[Any] = ..., scales: Optional[Any] = ..., *args, **kwargs):
        """ Initializer for an Anchors layer.

        Args
            size: The base size of the anchors to generate.
            stride: The stride of the anchors to generate.
            ratios: The ratios of the anchors to generate (defaults to AnchorParameters.default.ratios).
            scales: The scales of the anchors to generate (defaults to AnchorParameters.default.scales).
        """
        self.size = ...
        self.stride = ...
        self.ratios = ...
        self.scales = ...
        self.num_anchors = ...
        self.anchors = ...
    
    def call(self, inputs, **kwargs):
        ...
    
    def compute_output_shape(self, input_shape):
        ...
    
    def get_config(self):
        ...
    


class UpsampleLike(keras.layers.Layer):
    """ Keras layer for upsampling a Tensor to be the same shape as another Tensor.
    """
    def call(self, inputs, **kwargs):
        ...
    
    def compute_output_shape(self, input_shape):
        ...
    


class RegressBoxes(keras.layers.Layer):
    """ Keras layer for applying regression values to boxes.
    """
    def __init__(self, mean: Optional[Any] = ..., std: Optional[Any] = ..., *args, **kwargs):
        """ Initializer for the RegressBoxes layer.

        Args
            mean: The mean value of the regression values which was used for normalization.
            std: The standard value of the regression values which was used for normalization.
        """
        self.mean = ...
        self.std = ...
    
    def call(self, inputs, **kwargs):
        ...
    
    def compute_output_shape(self, input_shape):
        ...
    
    def get_config(self):
        ...
    


class ClipBoxes(keras.layers.Layer):
    """ Keras layer to clip box values to lie inside a given shape.
    """
    def call(self, inputs, **kwargs):
        ...
    
    def compute_output_shape(self, input_shape):
        ...
    


