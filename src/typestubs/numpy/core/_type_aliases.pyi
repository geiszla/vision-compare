"""
This type stub file was generated by pyright.
"""

import sys
from numpy.compat import unicode
from typing import Any, Optional

"""
Due to compatibility, numpy has a very large number of different naming
conventions for the scalar types (those subclassing from `numpy.generic`).
This file produces a convoluted set of dictionaries mapping names to types,
and sometimes other mappings too.

.. data:: allTypes
    A dictionary of names to types that will be exposed as attributes through
    ``np.core.numerictypes.*``

.. data:: sctypeDict
    Similar to `allTypes`, but maps a broader set of aliases to their types.

.. data:: sctypeNA
    NumArray-compatible names for the scalar types. Contains not only
    ``name: type`` mappings, but ``char: name`` mappings too.

    .. deprecated:: 1.16

.. data:: sctypes
    A dictionary keyed by a "type group" string, providing a list of types
    under that group.

"""
sctypeDict = {  }
class TypeNADict(dict):
    def __getitem__(self, key):
        ...
    
    def get(self, key, default: Optional[Any] = ...):
        ...
    


sctypeNA = TypeNADict()
allTypes = {  }
_abstract_types = {  }
_concrete_typeinfo = {  }
_concrete_types = v.type for (k, v) in _concrete_typeinfo.items()
def _bits_of(obj):
    ...

def bitname(obj):
    """Return a bit-width name for a given type object"""
    ...

def _add_types():
    ...

_int_ctypes = ['long', 'longlong', 'int', 'short', 'byte']
_uint_ctypes = list('u' + t for t in _int_ctypes)
def _add_aliases():
    ...

def _add_integer_aliases():
    ...

void = allTypes['void']
def _set_up_aliases():
    ...

sctypes = { 'int': [],'uint': [],'float': [],'complex': [],'others': [bool, object, bytes, unicode, void] }
def _add_array_type(typename, bits):
    ...

def _set_array_types():
    ...

_toadd = ['int', 'float', 'complex', 'bool', 'object']
if sys.version_info[0] >= 3:
    ...
else:
    ...
