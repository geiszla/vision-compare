"""
This type stub file was generated by pyright.
"""

from .overrides import set_module
from . import numerictypes as ntypes

"""Machine limits for Float32 and Float64 and (long double) if available...

"""
__all__ = ['finfo', 'iinfo']
def _fr0(a):
    """fix rank-0 --> rank-1"""
    ...

def _fr1(a):
    """fix rank > 0 --> rank-0"""
    ...

class MachArLike(object):
    """ Object to simulate MachAr instance """
    def __init__(self, ftype, **kwargs):
        self.title = ...
        self.epsilon = ...
        self.epsneg = ...
        self.xmax = ...
        self.xmin = ...
        self.ibeta = ...
        self.precision = ...
        self.resolution = ...
    


_convert_to_float = { ntypes.csingle: ntypes.single,ntypes.complex_: ntypes.float_,ntypes.clongfloat: ntypes.longfloat }
_title_fmt = 'numpy {} precision floating point number'
_MACHAR_PARAMS = { ntypes.double: dict(itype=ntypes.int64, fmt='%24.16e', title=_title_fmt.format('double')),ntypes.single: dict(itype=ntypes.int32, fmt='%15.7e', title=_title_fmt.format('single')),ntypes.longdouble: dict(itype=ntypes.longlong, fmt='%s', title=_title_fmt.format('long double')),ntypes.half: dict(itype=ntypes.int16, fmt='%12.5e', title=_title_fmt.format('half')) }
_KNOWN_TYPES = {  }
def _register_type(machar, bytepat):
    ...

_float_ma = {  }
def _register_known_types():
    ...

def _get_machar(ftype):
    """ Get MachAr instance or MachAr-like instance

    Get parameters for floating point type, by first trying signatures of
    various known floating point types, then, if none match, attempting to
    identify parameters by analysis.

    Parameters
    ----------
    ftype : class
        Numpy floating point type class (e.g. ``np.float64``)

    Returns
    -------
    ma_like : instance of :class:`MachAr` or :class:`MachArLike`
        Object giving floating point parameters for `ftype`.

    Warns
    -----
    UserWarning
        If the binary signature of the float type is not in the dictionary of
        known float types.
    """
    ...

def _discovered_machar(ftype):
    """ Create MachAr instance with found information on float types
    """
    ...

@set_module('numpy')
class finfo(object):
    """
    finfo(dtype)

    Machine limits for floating point types.

    Attributes
    ----------
    bits : int
        The number of bits occupied by the type.
    eps : float
        The smallest representable positive number such that
        ``1.0 + eps != 1.0``.  Type of `eps` is an appropriate floating
        point type.
    epsneg : floating point number of the appropriate type
        The smallest representable positive number such that
        ``1.0 - epsneg != 1.0``.
    iexp : int
        The number of bits in the exponent portion of the floating point
        representation.
    machar : MachAr
        The object which calculated these parameters and holds more
        detailed information.
    machep : int
        The exponent that yields `eps`.
    max : floating point number of the appropriate type
        The largest representable number.
    maxexp : int
        The smallest positive power of the base (2) that causes overflow.
    min : floating point number of the appropriate type
        The smallest representable number, typically ``-max``.
    minexp : int
        The most negative power of the base (2) consistent with there
        being no leading 0's in the mantissa.
    negep : int
        The exponent that yields `epsneg`.
    nexp : int
        The number of bits in the exponent including its sign and bias.
    nmant : int
        The number of bits in the mantissa.
    precision : int
        The approximate number of decimal digits to which this kind of
        float is precise.
    resolution : floating point number of the appropriate type
        The approximate decimal resolution of this type, i.e.,
        ``10**-precision``.
    tiny : float
        The smallest positive usable number.  Type of `tiny` is an
        appropriate floating point type.

    Parameters
    ----------
    dtype : float, dtype, or instance
        Kind of floating point data-type about which to get information.

    See Also
    --------
    MachAr : The implementation of the tests that produce this information.
    iinfo : The equivalent for integer data types.

    Notes
    -----
    For developers of NumPy: do not instantiate this at the module level.
    The initial calculation of these parameters is expensive and negatively
    impacts import times.  These objects are cached, so calling ``finfo()``
    repeatedly inside your functions is not a problem.

    """
    _finfo_cache = ...
    def __new__(cls, dtype):
        ...
    
    def _init(self, dtype):
        self.dtype = ...
        self.bits = ...
        self.max = ...
        self.min = ...
        self.eps = ...
        self.nexp = ...
        self.nmant = ...
        self.machar = ...
    
    def __str__(self):
        ...
    
    def __repr__(self):
        ...
    


@set_module('numpy')
class iinfo(object):
    """
    iinfo(type)

    Machine limits for integer types.

    Attributes
    ----------
    bits : int
        The number of bits occupied by the type.
    min : int
        The smallest integer expressible by the type.
    max : int
        The largest integer expressible by the type.

    Parameters
    ----------
    int_type : integer type, dtype, or instance
        The kind of integer data type to get information about.

    See Also
    --------
    finfo : The equivalent for floating point data types.

    Examples
    --------
    With types:

    >>> ii16 = np.iinfo(np.int16)
    >>> ii16.min
    -32768
    >>> ii16.max
    32767
    >>> ii32 = np.iinfo(np.int32)
    >>> ii32.min
    -2147483648
    >>> ii32.max
    2147483647

    With instances:

    >>> ii32 = np.iinfo(np.int32(10))
    >>> ii32.min
    -2147483648
    >>> ii32.max
    2147483647

    """
    _min_vals = ...
    _max_vals = ...
    def __init__(self, int_type):
        self.kind = ...
        self.bits = ...
        self.key = ...
    
    @property
    def min(self):
        """Minimum value of given dtype."""
        ...
    
    @property
    def max(self):
        """Maximum value of given dtype."""
        ...
    
    def __str__(self):
        """String representation."""
        ...
    
    def __repr__(self):
        ...
    


