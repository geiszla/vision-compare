"""
This type stub file was generated by pyright.
"""

from distutils.command.config import config as old_config
from typing import Any, Optional

class config(old_config):
    def initialize_options(self):
        self.fcompiler = ...
    
    def _check_compiler(self):
        ...
    
    def _wrap_method(self, mth, lang, args):
        self.compiler = ...
    
    def _compile(self, body, headers, include_dirs, lang):
        ...
    
    def _link(self, body, headers, include_dirs, libraries, library_dirs, lang):
        ...
    
    def check_header(self, header, include_dirs: Optional[Any] = ..., library_dirs: Optional[Any] = ..., lang=...):
        ...
    
    def check_decl(self, symbol, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ...):
        ...
    
    def check_macro_true(self, symbol, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ...):
        ...
    
    def check_type(self, type_name, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., library_dirs: Optional[Any] = ...):
        """Check type availability. Return True if the type can be compiled,
        False otherwise"""
        ...
    
    def check_type_size(self, type_name, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., library_dirs: Optional[Any] = ..., expected: Optional[Any] = ...):
        """Check size of a given type."""
        ...
    
    def check_func(self, func, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., decl: bool = ..., call: bool = ..., call_args: Optional[Any] = ...):
        ...
    
    def check_funcs_once(self, funcs, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., decl: bool = ..., call: bool = ..., call_args: Optional[Any] = ...):
        """Check a list of functions at once.

        This is useful to speed up things, since all the functions in the funcs
        list will be put in one compilation unit.

        Arguments
        ---------
        funcs : seq
            list of functions to test
        include_dirs : seq
            list of header paths
        libraries : seq
            list of libraries to link the code snippet to
        library_dirs : seq
            list of library paths
        decl : dict
            for every (key, value), the declaration in the value will be
            used for function in key. If a function is not in the
            dictionary, no declaration will be used.
        call : dict
            for every item (f, value), if the value is True, a call will be
            done to the function f.
        """
        ...
    
    def check_inline(self):
        """Return the inline keyword recognized by the compiler, empty string
        otherwise."""
        ...
    
    def check_restrict(self):
        """Return the restrict keyword recognized by the compiler, empty string
        otherwise."""
        ...
    
    def check_compiler_gcc4(self):
        """Return True if the C compiler is gcc >= 4."""
        ...
    
    def check_gcc_function_attribute(self, attribute, name):
        ...
    
    def check_gcc_function_attribute_with_intrinsics(self, attribute, name, code, include):
        ...
    
    def check_gcc_variable_attribute(self, attribute):
        ...
    
    def get_output(self, body, headers: Optional[Any] = ..., include_dirs: Optional[Any] = ..., libraries: Optional[Any] = ..., library_dirs: Optional[Any] = ..., lang=..., use_tee: Optional[Any] = ...):
        """Try to compile, link to an executable, and run a program
        built from 'body' and 'headers'. Returns the exit status code
        of the program and its output.
        """
        ...
    


class GrabStdout(object):
    def __init__(self):
        self.sys_stdout = ...
        self.data = ...
    
    def write(self, data):
        ...
    
    def flush(self):
        ...
    
    def restore(self):
        ...
    


