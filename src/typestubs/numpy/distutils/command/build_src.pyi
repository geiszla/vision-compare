"""
This type stub file was generated by pyright.
"""

import re
from distutils.command import build_ext

""" Build swig and f2py sources.
"""
def subst_vars(target, source, d):
    """Substitute any occurrence of @foo@ by d['foo'] from source file into
    target."""
    ...

class build_src(build_ext.build_ext):
    description = ...
    user_options = ...
    boolean_options = ...
    help_options = ...
    def initialize_options(self):
        self.extensions = ...
        self.package = ...
        self.py_modules = ...
        self.py_modules_dict = ...
        self.build_src = ...
        self.build_lib = ...
        self.build_base = ...
        self.force = ...
        self.inplace = ...
        self.package_dir = ...
        self.f2pyflags = ...
        self.f2py_opts = ...
        self.swigflags = ...
        self.swig_opts = ...
        self.swig_cpp = ...
        self.swig = ...
        self.verbose_cfg = ...
    
    def finalize_options(self):
        self.extensions = ...
        self.libraries = ...
        self.py_modules = ...
        self.data_files = ...
        self.py_modules_dict = ...
    
    def run(self):
        ...
    
    def build_sources(self):
        ...
    
    def build_data_files_sources(self):
        ...
    
    def _build_npy_pkg_config(self, info, gd):
        ...
    
    def build_npy_pkg_config(self):
        ...
    
    def build_py_modules_sources(self):
        ...
    
    def build_library_sources(self, lib_name, build_info):
        ...
    
    def build_extension_sources(self, ext):
        ...
    
    def generate_sources(self, sources, extension):
        ...
    
    def filter_py_files(self, sources):
        ...
    
    def filter_h_files(self, sources):
        ...
    
    def filter_files(self, sources, exts=...):
        ...
    
    def template_sources(self, sources, extension):
        ...
    
    def pyrex_sources(self, sources, extension):
        """Pyrex not supported; this remains for Cython support (see below)"""
        ...
    
    def generate_a_pyrex_source(self, base, ext_name, source, extension):
        """Pyrex is not supported, but some projects monkeypatch this method.

        That allows compiling Cython code, see gh-6955.
        This method will remain here for compatibility reasons.
        """
        ...
    
    def f2py_sources(self, sources, extension):
        ...
    
    def swig_sources(self, sources, extension):
        ...
    


_f_pyf_ext_match = re.compile(r'.*[.](f90|f95|f77|for|ftn|f|pyf)\Z', re.I).match
_header_ext_match = re.compile(r'.*[.](inc|h|hpp)\Z', re.I).match
_swig_module_name_match = re.compile(r'\s*%module\s*(.*\(\s*package\s*=\s*"(?P<package>[\w_]+)".*\)|)\s*(?P<name>[\w_]+)', re.I).match
_has_c_header = re.compile(r'-[*]-\s*c\s*-[*]-', re.I).search
_has_cpp_header = re.compile(r'-[*]-\s*c[+][+]\s*-[*]-', re.I).search
def get_swig_target(source):
    ...

def get_swig_modulename(source):
    ...

def _find_swig_target(target_dir, name):
    ...

_f2py_module_name_match = re.compile(r'\s*python\s*module\s*(?P<name>[\w_]+)', re.I).match
_f2py_user_module_name_match = re.compile(r'\s*python\s*module\s*(?P<name>[\w_]*?' r'__user__[\w_]*)', re.I).match
def get_f2py_modulename(source):
    ...

