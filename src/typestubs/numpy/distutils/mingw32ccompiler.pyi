"""
This type stub file was generated by pyright.
"""

import sys
import re
from typing import Any, Optional

"""
Support code for building Python extensions on Windows.

    # NT stuff
    # 1. Make sure libpython<version>.a exists for gcc.  If not, build it.
    # 2. Force windows to use gcc (we're struggling with MSVC and g77 support)
    # 3. Force windows to use g77

"""
if sys.version_info[0] < 3:
    ...
else:
    ...
def get_msvcr_replacement():
    """Replacement for outdated version of get_msvcr from cygwinccompiler"""
    ...

_START = re.compile(r'\[Ordinal/Name Pointer\] Table')
_TABLE = re.compile(r'^\s+\[([\s*[0-9]*)\] ([a-zA-Z0-9_]*)')
class Mingw32CCompiler(distutils.cygwinccompiler.CygwinCCompiler):
    """ A modified MingW32 compiler compatible with an MSVC built Python.

    """
    compiler_type = ...
    def __init__(self, verbose=..., dry_run=..., force=...):
        self.compiler_cxx = ...
    
    def link(self, target_desc, objects, output_filename, output_dir, libraries, library_dirs, runtime_library_dirs, export_symbols: Optional[Any] = ..., debug=..., extra_preargs: Optional[Any] = ..., extra_postargs: Optional[Any] = ..., build_temp: Optional[Any] = ..., target_lang: Optional[Any] = ...):
        ...
    
    def object_filenames(self, source_filenames, strip_dir=..., output_dir=...):
        ...
    


def find_python_dll():
    ...

def dump_table(dll):
    ...

def generate_def(dll, dfile):
    """Given a dll file location,  get all its exported symbols and dump them
    into the given def file.

    The .def file will be overwritten"""
    ...

def find_dll(dll_name):
    ...

def build_msvcr_library(debug: bool = ...):
    ...

def build_import_library():
    ...

def _check_for_import_lib():
    """Check if an import library for the Python runtime already exists."""
    ...

def _build_import_library_amd64():
    ...

def _build_import_library_x86():
    """ Build the import libraries for Mingw32-gcc on Windows
    """
    ...

_MSVCRVER_TO_FULLVER = {  }
if sys.platform == 'win32':
    ...
def msvc_manifest_xml(maj, min):
    """Given a major and minor version of the MSVCR, returns the
    corresponding XML file."""
    ...

def manifest_rc(name, type=...):
    """Return the rc file used to generate the res file which will be embedded
    as manifest for given manifest file name, of given type ('dll' or
    'exe').

    Parameters
    ----------
    name : str
            name of the manifest file to embed
    type : str {'dll', 'exe'}
            type of the binary which will embed the manifest

    """
    ...

def check_embedded_msvcr_match_linked(msver):
    """msver is the ms runtime version used for the MANIFEST."""
    ...

def configtest_name(config):
    ...

def manifest_name(config):
    ...

def rc_name(config):
    ...

def generate_manifest(config):
    ...

