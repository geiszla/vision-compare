"""
This type stub file was generated by pyright.
"""

from __future__ import absolute_import
from ..utils.generic_utils import deserialize_keras_object
from ..engine.base_layer import InputSpec, Layer
from ..engine import Input, InputLayer
from .merge import Add, Average, Concatenate, Dot, Maximum, Minimum, Multiply, Subtract, add, average, concatenate, dot, maximum, minimum, multiply, subtract
from .core import Activation, ActivityRegularization, Dense, Dropout, Flatten, Lambda, Masking, Permute, RepeatVector, Reshape, SpatialDropout1D, SpatialDropout2D, SpatialDropout3D
from .convolutional import Conv1D, Conv2D, Conv2DTranspose, Conv3D, Conv3DTranspose, Convolution1D, Convolution2D, Convolution3D, Cropping1D, Cropping2D, Cropping3D, Deconvolution2D, Deconvolution3D, DepthwiseConv2D, SeparableConv1D, SeparableConv2D, UpSampling1D, UpSampling2D, UpSampling3D, ZeroPadding1D, ZeroPadding2D, ZeroPadding3D
from .pooling import AveragePooling1D, AveragePooling2D, AveragePooling3D, AvgPool1D, AvgPool2D, AvgPool3D, GlobalAveragePooling1D, GlobalAveragePooling2D, GlobalAveragePooling3D, GlobalAvgPool1D, GlobalAvgPool2D, GlobalAvgPool3D, GlobalMaxPool1D, GlobalMaxPool2D, GlobalMaxPool3D, GlobalMaxPooling1D, GlobalMaxPooling2D, GlobalMaxPooling3D, MaxPool1D, MaxPool2D, MaxPool3D, MaxPooling1D, MaxPooling2D, MaxPooling3D
from .local import LocallyConnected1D, LocallyConnected2D
from .recurrent import GRU, GRUCell, LSTM, LSTMCell, RNN, SimpleRNN, SimpleRNNCell, StackedRNNCells
from .cudnn_recurrent import CuDNNGRU, CuDNNLSTM
from .normalization import BatchNormalization
from .embeddings import Embedding
from .noise import AlphaDropout, GaussianDropout, GaussianNoise
from .advanced_activations import ELU, LeakyReLU, PReLU, ReLU, Softmax, ThresholdedReLU
from .wrappers import Bidirectional, TimeDistributed
from .convolutional_recurrent import ConvLSTM2D, ConvLSTM2DCell
from ..legacy.layers import AtrousConvolution1D, AtrousConvolution2D, ConvRecurrent2D, Highway, MaxoutDense, Recurrent
from typing import Any, Optional

def serialize(layer):
    """Serialize a layer.

    # Arguments
        layer: a Layer object.

    # Returns
        dictionary with config.
    """
    ...

def deserialize(config, custom_objects: Optional[Any] = ...):
    """Instantiate a layer from a config dictionary.

    # Arguments
        config: dict of the form {'class_name': str, 'config': dict}
        custom_objects: dict mapping class names (or function names)
            of custom (non-Keras) objects to class/functions

    # Returns
        Layer instance (may be Model, Sequential, Layer...)
    """
    ...

