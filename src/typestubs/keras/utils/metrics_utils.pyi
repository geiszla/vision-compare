"""
This type stub file was generated by pyright.
"""

from enum import Enum
from typing import Any, Optional

"""Utilities related to metrics."""
NEG_INF = - 10000000000
class Reduction(object):
    """Types of metrics reduction.

    Contains the following values:
    * `SUM`: Scalar sum of weighted values.
    * `SUM_OVER_BATCH_SIZE`: Scalar `SUM` of weighted values divided by
        number of elements in values.
    * `WEIGHTED_MEAN`: Scalar sum of weighted values divided by sum of weights.
    """
    SUM = ...
    SUM_OVER_BATCH_SIZE = ...
    WEIGHTED_MEAN = ...


def update_state_wrapper(update_state_fn):
    """Decorator to wrap metric `update_state()` with `add_update()`.

    # Arguments
        update_state_fn: function that accumulates metric statistics.

    # Returns
        Decorated function that wraps `update_state_fn()` with `add_update()`.
    """
    ...

def result_wrapper(result_fn):
    """Decorator to wrap metric `result()` with identity op.

    Wrapping result in identity so that control dependency between
    update_op from `update_state` and result works in case result returns
    a tensor.

    # Arguments
        result_fn: function that computes the metric result.

    # Returns
        Decorated function that wraps `result()` with identity op.
    """
    ...

def filter_top_k(x, k):
    """Filters top-k values in the last dim of x and set the rest to NEG_INF.
    Used for computing top-k prediction values in dense labels (which has the same
    shape as predictions) for recall and precision top-k metrics.

    # Arguments
        x: tensor with any dimensions.
        k: the number of values to keep.

    # Returns
        tensor with same shape and dtype as x.
    """
    ...

def to_list(x):
    ...

def assert_thresholds_range(thresholds):
    ...

def parse_init_thresholds(thresholds, default_threshold=...):
    ...

class ConfusionMatrix(Enum):
    TRUE_POSITIVES = ...
    FALSE_POSITIVES = ...
    TRUE_NEGATIVES = ...
    FALSE_NEGATIVES = ...


class AUCCurve(Enum):
    """Type of AUC Curve (ROC or PR)."""
    ROC = ...
    PR = ...
    @staticmethod
    def from_str(key):
        ...
    


class AUCSummationMethod(Enum):
    """Type of AUC summation method.

    https://en.wikipedia.org/wiki/Riemann_sum)

    Contains the following values:
    * 'interpolation': Applies mid-point summation scheme for `ROC` curve. For
    `PR` curve, interpolates (true/false) positives but not the ratio that is
    precision (see Davis & Goadrich 2006 for details).
    * 'minoring': Applies left summation for increasing intervals and right
    summation for decreasing intervals.
    * 'majoring': Applies right summation for increasing intervals and left
    summation for decreasing intervals.
    """
    INTERPOLATION = ...
    MAJORING = ...
    MINORING = ...
    @staticmethod
    def from_str(key):
        ...
    


def weighted_assign_add(label, pred, weights, var):
    ...

def update_confusion_matrix_variables(variables_to_update, y_true, y_pred, thresholds=..., top_k: Optional[Any] = ..., class_id: Optional[Any] = ..., sample_weight: Optional[Any] = ...):
    """Returns op to update the given confusion matrix variables.

    For every pair of values in y_true and y_pred:

    true_positive: y_true == True and y_pred > thresholds
    false_negatives: y_true == True and y_pred <= thresholds
    true_negatives: y_true == False and y_pred <= thresholds
    false_positive: y_true == False and y_pred > thresholds

    The results will be weighted and added together. When multiple thresholds are
    provided, we will repeat the same for every threshold.

    For estimation of these metrics over a stream of data, the function creates an
    `update_op` operation that updates the given variables.

    If `sample_weight` is `None`, weights default to 1.
    Use weights of 0 to mask values.

    # Arguments
    variables_to_update: Dictionary with 'tp', 'fn', 'tn', 'fp' as valid keys
      and corresponding variables to update as values.
    y_true: A `Tensor` whose shape matches `y_pred`. Will be cast to `bool`.
    y_pred: A floating point `Tensor` of arbitrary shape and whose values are in
      the range `[0, 1]`.
    thresholds: A float value or a python list or tuple of float thresholds in
      `[0, 1]`, or NEG_INF (used when top_k is set).
    top_k: Optional int, indicates that the positive labels should be limited to
      the top k predictions.
    class_id: Optional int, limits the prediction and labels to the class
      specified by this argument.
    sample_weight: Optional `Tensor` whose rank is either 0, or the same rank as
      `y_true`, and must be broadcastable to `y_true` (i.e., all dimensions must
      be either `1`, or the same as the corresponding `y_true` dimension).

    # Returns
        Update ops.

    # Raises
        ValueError: If `y_pred` and `y_true` have mismatched shapes, or if
            `sample_weight` is not `None` and its shape doesn't match `y_pred`, or if
            `variables_to_update` contains invalid keys.
    """
    ...

