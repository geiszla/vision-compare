"""
This type stub file was generated by pyright.
"""

import functools
from typing import Any, Optional

"""Interface converters for Keras 1 support in Keras 2.
"""
def generate_legacy_interface(allowed_positional_args: Optional[Any] = ..., conversions: Optional[Any] = ..., preprocessor: Optional[Any] = ..., value_conversions: Optional[Any] = ..., object_type=...):
    ...

generate_legacy_method_interface = functools.partial(generate_legacy_interface, object_type='method')
def raise_duplicate_arg_error(old_arg, new_arg):
    ...

legacy_dense_support = generate_legacy_interface(allowed_positional_args=['units'], conversions=[('output_dim', 'units'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')])
legacy_dropout_support = generate_legacy_interface(allowed_positional_args=['rate', 'noise_shape', 'seed'], conversions=[('p', 'rate')])
def embedding_kwargs_preprocessor(args, kwargs):
    ...

legacy_embedding_support = generate_legacy_interface(allowed_positional_args=['input_dim', 'output_dim'], conversions=[('init', 'embeddings_initializer'), ('W_regularizer', 'embeddings_regularizer'), ('W_constraint', 'embeddings_constraint')], preprocessor=embedding_kwargs_preprocessor)
legacy_pooling1d_support = generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('pool_length', 'pool_size'), ('stride', 'strides'), ('border_mode', 'padding')])
legacy_prelu_support = generate_legacy_interface(allowed_positional_args=['alpha_initializer'], conversions=[('init', 'alpha_initializer')])
legacy_gaussiannoise_support = generate_legacy_interface(allowed_positional_args=['stddev'], conversions=[('sigma', 'stddev')])
def recurrent_args_preprocessor(args, kwargs):
    ...

legacy_recurrent_support = generate_legacy_interface(allowed_positional_args=['units'], conversions=[('output_dim', 'units'), ('init', 'kernel_initializer'), ('inner_init', 'recurrent_initializer'), ('inner_activation', 'recurrent_activation'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('U_regularizer', 'recurrent_regularizer'), ('dropout_W', 'dropout'), ('dropout_U', 'recurrent_dropout'), ('consume_less', 'implementation')], value_conversions={ 'consume_less': { 'cpu': 0,'mem': 1,'gpu': 2 } }, preprocessor=recurrent_args_preprocessor)
legacy_gaussiandropout_support = generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate')])
legacy_pooling2d_support = generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('border_mode', 'padding'), ('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } })
legacy_pooling3d_support = generate_legacy_interface(allowed_positional_args=['pool_size', 'strides', 'padding'], conversions=[('border_mode', 'padding'), ('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } })
legacy_global_pooling_support = generate_legacy_interface(conversions=[('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } })
legacy_upsampling1d_support = generate_legacy_interface(allowed_positional_args=['size'], conversions=[('length', 'size')])
legacy_upsampling2d_support = generate_legacy_interface(allowed_positional_args=['size'], conversions=[('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } })
legacy_upsampling3d_support = generate_legacy_interface(allowed_positional_args=['size'], conversions=[('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } })
def conv1d_args_preprocessor(args, kwargs):
    ...

legacy_conv1d_support = generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('filter_length', 'kernel_size'), ('subsample_length', 'strides'), ('border_mode', 'padding'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], preprocessor=conv1d_args_preprocessor)
def conv2d_args_preprocessor(args, kwargs):
    ...

legacy_conv2d_support = generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } }, preprocessor=conv2d_args_preprocessor)
def separable_conv2d_args_preprocessor(args, kwargs):
    ...

legacy_separable_conv2d_support = generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('b_regularizer', 'bias_regularizer'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } }, preprocessor=separable_conv2d_args_preprocessor)
def deconv2d_args_preprocessor(args, kwargs):
    ...

legacy_deconv2d_support = generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } }, preprocessor=deconv2d_args_preprocessor)
def conv3d_args_preprocessor(args, kwargs):
    ...

legacy_conv3d_support = generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('W_regularizer', 'kernel_regularizer'), ('b_regularizer', 'bias_regularizer'), ('W_constraint', 'kernel_constraint'), ('b_constraint', 'bias_constraint'), ('bias', 'use_bias')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } }, preprocessor=conv3d_args_preprocessor)
def batchnorm_args_preprocessor(args, kwargs):
    ...

def convlstm2d_args_preprocessor(args, kwargs):
    ...

legacy_convlstm2d_support = generate_legacy_interface(allowed_positional_args=['filters', 'kernel_size'], conversions=[('nb_filter', 'filters'), ('subsample', 'strides'), ('border_mode', 'padding'), ('dim_ordering', 'data_format'), ('init', 'kernel_initializer'), ('inner_init', 'recurrent_initializer'), ('W_regularizer', 'kernel_regularizer'), ('U_regularizer', 'recurrent_regularizer'), ('b_regularizer', 'bias_regularizer'), ('inner_activation', 'recurrent_activation'), ('dropout_W', 'dropout'), ('dropout_U', 'recurrent_dropout'), ('bias', 'use_bias')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } }, preprocessor=convlstm2d_args_preprocessor)
legacy_batchnorm_support = generate_legacy_interface(allowed_positional_args=[], conversions=[('beta_init', 'beta_initializer'), ('gamma_init', 'gamma_initializer')], preprocessor=batchnorm_args_preprocessor)
def zeropadding2d_args_preprocessor(args, kwargs):
    ...

legacy_zeropadding2d_support = generate_legacy_interface(allowed_positional_args=['padding'], conversions=[('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } }, preprocessor=zeropadding2d_args_preprocessor)
legacy_zeropadding3d_support = generate_legacy_interface(allowed_positional_args=['padding'], conversions=[('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } })
legacy_cropping2d_support = generate_legacy_interface(allowed_positional_args=['cropping'], conversions=[('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } })
legacy_cropping3d_support = generate_legacy_interface(allowed_positional_args=['cropping'], conversions=[('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } })
legacy_spatialdropout1d_support = generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate')])
legacy_spatialdropoutNd_support = generate_legacy_interface(allowed_positional_args=['rate'], conversions=[('p', 'rate'), ('dim_ordering', 'data_format')], value_conversions={ 'dim_ordering': { 'tf': 'channels_last','th': 'channels_first','default': None } })
legacy_lambda_support = generate_legacy_interface(allowed_positional_args=['function', 'output_shape'])
def generator_methods_args_preprocessor(args, kwargs):
    ...

legacy_generator_methods_support = generate_legacy_method_interface(allowed_positional_args=['generator', 'steps_per_epoch', 'epochs'], conversions=[('samples_per_epoch', 'steps_per_epoch'), ('val_samples', 'steps'), ('nb_epoch', 'epochs'), ('nb_val_samples', 'validation_steps'), ('nb_worker', 'workers'), ('pickle_safe', 'use_multiprocessing'), ('max_q_size', 'max_queue_size')], preprocessor=generator_methods_args_preprocessor)
legacy_model_constructor_support = generate_legacy_interface(allowed_positional_args=None, conversions=[('input', 'inputs'), ('output', 'outputs')])
legacy_input_support = generate_legacy_interface(allowed_positional_args=None, conversions=[('input_dtype', 'dtype')])
def add_weight_args_preprocessing(args, kwargs):
    ...

legacy_add_weight_support = generate_legacy_interface(allowed_positional_args=['name', 'shape'], preprocessor=add_weight_args_preprocessing)
def get_updates_arg_preprocessing(args, kwargs):
    ...

legacy_get_updates_support = generate_legacy_interface(allowed_positional_args=None, conversions=[], preprocessor=get_updates_arg_preprocessing)
