"""
This type stub file was generated by pyright.
"""

import logging
import sys
from cffi import FFI

logger = logging.getLogger(__name__)
defs = """
struct Pixel_RGBA {
    unsigned char r,g,b,a;
};
struct Pixel_I16 {
    unsigned char l,r;
};
"""
ffi = FFI()
class PyAccess:
    def __init__(self, img, readonly: bool = ...):
        self.readonly = ...
        self.image8 = ...
        self.image32 = ...
        self.image = ...
    
    def _post_init(self):
        ...
    
    def __setitem__(self, xy, color):
        """
        Modifies the pixel at x,y. The color is given as a single
        numerical value for single band images, and a tuple for
        multi-band images

        :param xy: The pixel coordinate, given as (x, y). See
           :ref:`coordinate-system`.
        :param color: The pixel value.
        """
        ...
    
    def __getitem__(self, xy):
        """
        Returns the pixel at x,y. The pixel is returned as a single
        value for single band images or a tuple for multiple band
        images

        :param xy: The pixel coordinate, given as (x, y). See
          :ref:`coordinate-system`.
        :returns: a pixel value for single band images, a tuple of
          pixel values for multiband images.
        """
        ...
    
    putpixel = ...
    getpixel = ...
    def check_xy(self, xy):
        ...
    


class _PyAccess32_2(PyAccess):
    """ PA, LA, stored in first and last bytes of a 32 bit word """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


class _PyAccess32_3(PyAccess):
    """ RGB and friends, stored in the first three bytes of a 32 bit word """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


class _PyAccess32_4(PyAccess):
    """ RGBA etc, all 4 bytes of a 32 bit word """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


class _PyAccess8(PyAccess):
    """ 1, L, P, 8 bit images stored as uint8 """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


class _PyAccessI16_N(PyAccess):
    """ I;16 access, native bitendian without conversion """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


class _PyAccessI16_L(PyAccess):
    """ I;16L access, with conversion """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


class _PyAccessI16_B(PyAccess):
    """ I;16B access, with conversion """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


class _PyAccessI32_N(PyAccess):
    """ Signed Int32 access, native endian """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


class _PyAccessI32_Swap(PyAccess):
    """ I;32L/B access, with byteswapping conversion """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def reverse(self, i):
        ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


class _PyAccessF(PyAccess):
    """ 32 bit float access """
    def _post_init(self, *args, **kwargs):
        self.pixels = ...
    
    def get_pixel(self, x, y):
        ...
    
    def set_pixel(self, x, y, color):
        ...
    


mode_map = { "1": _PyAccess8,"L": _PyAccess8,"P": _PyAccess8,"LA": _PyAccess32_2,"La": _PyAccess32_2,"PA": _PyAccess32_2,"RGB": _PyAccess32_3,"LAB": _PyAccess32_3,"HSV": _PyAccess32_3,"YCbCr": _PyAccess32_3,"RGBA": _PyAccess32_4,"RGBa": _PyAccess32_4,"RGBX": _PyAccess32_4,"CMYK": _PyAccess32_4,"F": _PyAccessF,"I": _PyAccessI32_N }
if sys.byteorder == "little":
    ...
else:
    ...
def new(img, readonly: bool = ...):
    ...

