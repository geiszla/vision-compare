"""
This type stub file was generated by pyright.
"""

from . import ImageFile
from typing import Any, Optional

def Skip(self, marker):
    ...

def APP(self, marker):
    ...

def COM(self, marker):
    ...

def SOF(self, marker):
    self.bits = ...
    self.layers = ...

def DQT(self, marker):
    ...

MARKER = { 65472: ("SOF0", "Baseline DCT", SOF),65473: ("SOF1", "Extended Sequential DCT", SOF),65474: ("SOF2", "Progressive DCT", SOF),65475: ("SOF3", "Spatial lossless", SOF),65476: ("DHT", "Define Huffman table", Skip),65477: ("SOF5", "Differential sequential DCT", SOF),65478: ("SOF6", "Differential progressive DCT", SOF),65479: ("SOF7", "Differential spatial", SOF),65480: ("JPG", "Extension", None),65481: ("SOF9", "Extended sequential DCT (AC)", SOF),65482: ("SOF10", "Progressive DCT (AC)", SOF),65483: ("SOF11", "Spatial lossless DCT (AC)", SOF),65484: ("DAC", "Define arithmetic coding conditioning", Skip),65485: ("SOF13", "Differential sequential DCT (AC)", SOF),65486: ("SOF14", "Differential progressive DCT (AC)", SOF),65487: ("SOF15", "Differential spatial (AC)", SOF),65488: ("RST0", "Restart 0", None),65489: ("RST1", "Restart 1", None),65490: ("RST2", "Restart 2", None),65491: ("RST3", "Restart 3", None),65492: ("RST4", "Restart 4", None),65493: ("RST5", "Restart 5", None),65494: ("RST6", "Restart 6", None),65495: ("RST7", "Restart 7", None),65496: ("SOI", "Start of image", None),65497: ("EOI", "End of image", None),65498: ("SOS", "Start of scan", Skip),65499: ("DQT", "Define quantization table", DQT),65500: ("DNL", "Define number of lines", Skip),65501: ("DRI", "Define restart interval", Skip),65502: ("DHP", "Define hierarchical progression", SOF),65503: ("EXP", "Expand reference component", Skip),65504: ("APP0", "Application segment 0", APP),65505: ("APP1", "Application segment 1", APP),65506: ("APP2", "Application segment 2", APP),65507: ("APP3", "Application segment 3", APP),65508: ("APP4", "Application segment 4", APP),65509: ("APP5", "Application segment 5", APP),65510: ("APP6", "Application segment 6", APP),65511: ("APP7", "Application segment 7", APP),65512: ("APP8", "Application segment 8", APP),65513: ("APP9", "Application segment 9", APP),65514: ("APP10", "Application segment 10", APP),65515: ("APP11", "Application segment 11", APP),65516: ("APP12", "Application segment 12", APP),65517: ("APP13", "Application segment 13", APP),65518: ("APP14", "Application segment 14", APP),65519: ("APP15", "Application segment 15", APP),65520: ("JPG0", "Extension 0", None),65521: ("JPG1", "Extension 1", None),65522: ("JPG2", "Extension 2", None),65523: ("JPG3", "Extension 3", None),65524: ("JPG4", "Extension 4", None),65525: ("JPG5", "Extension 5", None),65526: ("JPG6", "Extension 6", None),65527: ("JPG7", "Extension 7", None),65528: ("JPG8", "Extension 8", None),65529: ("JPG9", "Extension 9", None),65530: ("JPG10", "Extension 10", None),65531: ("JPG11", "Extension 11", None),65532: ("JPG12", "Extension 12", None),65533: ("JPG13", "Extension 13", None),65534: ("COM", "Comment", COM) }
def _accept(prefix):
    ...

class JpegImageFile(ImageFile.ImageFile):
    format = ...
    format_description = ...
    def _open(self):
        self.bits = ...
        self.layer = ...
        self.huffman_dc = ...
        self.huffman_ac = ...
        self.quantization = ...
        self.app = ...
        self.applist = ...
        self.icclist = ...
    
    def load_read(self, read_bytes):
        """
        internal: read more image data
        For premature EOF and LOAD_TRUNCATED_IMAGES adds EOI marker
        so libjpeg can finish decoding
        """
        ...
    
    def draft(self, mode, size):
        self.tile = ...
        self.decoderconfig = ...
    
    def load_djpeg(self):
        self.mode = ...
        self.tile = ...
    
    def _getexif(self):
        ...
    
    def _getmp(self):
        ...
    


def _fixup_dict(src_dict):
    ...

def _getexif(self):
    ...

def _getmp(self):
    ...

RAWMODE = { "1": "L","L": "L","RGB": "RGB","RGBX": "RGB","CMYK": "CMYK;I","YCbCr": "YCbCr" }
zigzag_index = (0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63)
samplings = { (1, 1, 1, 1, 1, 1): 0,(2, 1, 1, 1, 1, 1): 1,(2, 2, 1, 1, 1, 1): 2 }
def convert_dict_qtables(qtables):
    ...

def get_sampling(im):
    ...

def _save(im, fp, filename):
    ...

def _save_cjpeg(im, fp, filename):
    ...

def jpeg_factory(fp: Optional[Any] = ..., filename: Optional[Any] = ...):
    ...

