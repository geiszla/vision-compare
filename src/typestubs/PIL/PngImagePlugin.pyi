"""
This type stub file was generated by pyright.
"""

import logging
import re
from . import ImageFile
from typing import Any, Optional

logger = logging.getLogger(__name__)
is_cid = re.compile(rb"\w\w\w\w").match
_MAGIC = b"\211PNG\r\n\032\n"
_MODES = { (1, 0): ("1", "1"),(2, 0): ("L", "L;2"),(4, 0): ("L", "L;4"),(8, 0): ("L", "L"),(16, 0): ("I", "I;16B"),(8, 2): ("RGB", "RGB"),(16, 2): ("RGB", "RGB;16B"),(1, 3): ("P", "P;1"),(2, 3): ("P", "P;2"),(4, 3): ("P", "P;4"),(8, 3): ("P", "P"),(8, 4): ("LA", "LA"),(16, 4): ("RGBA", "LA;16B"),(8, 6): ("RGBA", "RGBA"),(16, 6): ("RGBA", "RGBA;16B") }
_simple_palette = re.compile(b"^\xff*\x00\xff*$")
MAX_TEXT_CHUNK = ImageFile.SAFEBLOCK
MAX_TEXT_MEMORY = 64 * MAX_TEXT_CHUNK
def _safe_zlib_decompress(s):
    ...

def _crc32(data, seed=...):
    ...

class ChunkStream:
    def __init__(self, fp):
        self.fp = ...
        self.queue = ...
    
    def read(self):
        """Fetch a new chunk. Returns header information."""
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, *args):
        ...
    
    def close(self):
        self.queue = ...
    
    def push(self, cid, pos, length):
        ...
    
    def call(self, cid, pos, length):
        """Call the appropriate chunk handler"""
        ...
    
    def crc(self, cid, data):
        """Read and verify checksum"""
        ...
    
    def crc_skip(self, cid, data):
        """Read checksum.  Used if the C module is not present"""
        ...
    
    def verify(self, endchunk=...):
        ...
    


class iTXt(str):
    """
    Subclass of string to allow iTXt chunks to look like strings while
    keeping their extra information

    """
    @staticmethod
    def __new__(cls, text, lang: Optional[Any] = ..., tkey: Optional[Any] = ...):
        """
        :param cls: the class to use when creating the instance
        :param text: value for this key
        :param lang: language code
        :param tkey: UTF-8 version of the key name
        """
        self.lang = ...
        self.tkey = ...
    


class PngInfo:
    """
    PNG chunk container (for use with save(pnginfo=))

    """
    def __init__(self):
        self.chunks = ...
    
    def add(self, cid, data):
        """Appends an arbitrary chunk. Use with caution.

        :param cid: a byte string, 4 bytes long.
        :param data: a byte string of the encoded data

        """
        ...
    
    def add_itxt(self, key, value, lang=..., tkey=..., zip: bool = ...):
        """Appends an iTXt chunk.

        :param key: latin-1 encodable text key name
        :param value: value for this key
        :param lang: language code
        :param tkey: UTF-8 version of the key name
        :param zip: compression flag

        """
        ...
    
    def add_text(self, key, value, zip: bool = ...):
        """Appends a text chunk.

        :param key: latin-1 encodable text key name
        :param value: value for this key, text or an
           :py:class:`PIL.PngImagePlugin.iTXt` instance
        :param zip: compression flag

        """
        ...
    


class PngStream(ChunkStream):
    def __init__(self, fp):
        self.im_info = ...
        self.im_text = ...
        self.im_size = ...
        self.im_mode = ...
        self.im_tile = ...
        self.im_palette = ...
        self.im_custom_mimetype = ...
        self.text_memory = ...
    
    def check_text_memory(self, chunklen):
        ...
    
    def chunk_iCCP(self, pos, length):
        ...
    
    def chunk_IHDR(self, pos, length):
        self.im_size = ...
    
    def chunk_IDAT(self, pos, length):
        self.im_tile = ...
        self.im_idat = ...
    
    def chunk_IEND(self, pos, length):
        ...
    
    def chunk_PLTE(self, pos, length):
        ...
    
    def chunk_tRNS(self, pos, length):
        ...
    
    def chunk_gAMA(self, pos, length):
        ...
    
    def chunk_cHRM(self, pos, length):
        ...
    
    def chunk_sRGB(self, pos, length):
        ...
    
    def chunk_pHYs(self, pos, length):
        ...
    
    def chunk_tEXt(self, pos, length):
        ...
    
    def chunk_zTXt(self, pos, length):
        ...
    
    def chunk_iTXt(self, pos, length):
        ...
    
    def chunk_eXIf(self, pos, length):
        ...
    
    def chunk_acTL(self, pos, length):
        self.im_custom_mimetype = ...
    


def _accept(prefix):
    ...

class PngImageFile(ImageFile.ImageFile):
    format = ...
    format_description = ...
    def _open(self):
        self.png = ...
        self.mode = ...
        self.info = ...
        self.tile = ...
        self.custom_mimetype = ...
    
    @property
    def text(self):
        ...
    
    def verify(self):
        """Verify PNG file"""
        self.fp = ...
    
    def load_prepare(self):
        """internal: prepare to read PNG file"""
        ...
    
    def load_read(self, read_bytes):
        """internal: read more image data"""
        ...
    
    def load_end(self):
        """internal: finished reading image data"""
        self.png = ...
    
    def _getexif(self):
        ...
    
    def getexif(self):
        ...
    


_OUTMODES = { "1": ("1", b"\x01\x00"),"L;1": ("L;1", b"\x01\x00"),"L;2": ("L;2", b"\x02\x00"),"L;4": ("L;4", b"\x04\x00"),"L": ("L", b"\x08\x00"),"LA": ("LA", b"\x08\x04"),"I": ("I;16B", b"\x10\x00"),"I;16": ("I;16B", b"\x10\x00"),"P;1": ("P;1", b"\x01\x03"),"P;2": ("P;2", b"\x02\x03"),"P;4": ("P;4", b"\x04\x03"),"P": ("P", b"\x08\x03"),"RGB": ("RGB", b"\x08\x02"),"RGBA": ("RGBA", b"\x08\x06") }
def putchunk(fp, cid, *data):
    """Write a PNG chunk (including CRC field)"""
    ...

class _idat:
    def __init__(self, fp, chunk):
        self.fp = ...
        self.chunk = ...
    
    def write(self, data):
        ...
    


def _save(im, fp, filename, chunk=...):
    ...

def getchunks(im, **params):
    """Return a list of PNG chunks representing this image."""
    class collector:
        ...
    
    

