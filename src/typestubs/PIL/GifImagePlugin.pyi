"""
This type stub file was generated by pyright.
"""

from . import ImageFile
from typing import Any, Optional

def _accept(prefix):
    ...

class GifImageFile(ImageFile.ImageFile):
    format = ...
    format_description = ...
    _close_exclusive_fp_after_loading = ...
    global_palette = ...
    def data(self):
        ...
    
    def _open(self):
        self.tile = ...
    
    @property
    def n_frames(self):
        ...
    
    @property
    def is_animated(self):
        ...
    
    def seek(self, frame):
        ...
    
    def _seek(self, frame):
        self.tile = ...
        self.fp = ...
        self.palette = ...
        self.mode = ...
    
    def tell(self):
        ...
    
    def load_end(self):
        ...
    
    def _close__fp(self):
        ...
    


RAWMODE = { "1": "L","L": "L","P": "P" }
def _normalize_mode(im, initial_call: bool = ...):
    """
    Takes an image (or frame), returns an image in a mode that is appropriate
    for saving in a Gif.

    It may return the original image, or it may return an image converted to
    palette or 'L' mode.

    UNDONE: What is the point of mucking with the initial call palette, for
    an image that shouldn't have a palette, or it would be a mode 'P' and
    get returned in the RAWMODE clause.

    :param im: Image object
    :param initial_call: Default false, set to true for a single frame.
    :returns: Image object
    """
    ...

def _normalize_palette(im, palette, info):
    """
    Normalizes the palette for image.
      - Sets the palette to the incoming palette, if provided.
      - Ensures that there's a palette for L mode images
      - Optimizes the palette if necessary/desired.

    :param im: Image object
    :param palette: bytes object containing the source palette, or ....
    :param info: encoderinfo
    :returns: Image object
    """
    ...

def _write_single_frame(im, fp, palette):
    ...

def _write_multiple_frames(im, fp, palette):
    ...

def _save_all(im, fp, filename):
    ...

def _save(im, fp, filename, save_all: bool = ...):
    ...

def get_interlace(im):
    ...

def _write_local_header(fp, im, offset, flags):
    ...

def _save_netpbm(im, fp, filename):
    ...

_FORCE_OPTIMIZE = False
def _get_optimize(im, info):
    """
    Palette optimization is a potentially expensive operation.

    This function determines if the palette should be optimized using
    some heuristics, then returns the list of palette entries in use.

    :param im: Image object
    :param info: encoderinfo
    :returns: list of indexes of palette entries in use, or None
    """
    ...

def _get_color_table_size(palette_bytes):
    ...

def _get_header_palette(palette_bytes):
    """
    Returns the palette, null padded to the next power of 2 (*3) bytes
    suitable for direct inclusion in the GIF header

    :param palette_bytes: Unpadded palette bytes, in RGBRGB form
    :returns: Null padded palette
    """
    ...

def _get_palette_bytes(im):
    """
    Gets the palette for inclusion in the gif header

    :param im: Image object
    :returns: Bytes, len<=768 suitable for inclusion in gif header
    """
    ...

def _get_background(im, infoBackground):
    ...

def _get_global_header(im, info):
    """Return a list of strings representing a GIF header"""
    ...

def _write_frame_data(fp, im_frame, offset, params):
    ...

def getheader(im, palette: Optional[Any] = ..., info: Optional[Any] = ...):
    """
    Legacy Method to get Gif data from image.

    Warning:: May modify image data.

    :param im: Image object
    :param palette: bytes object containing the source palette, or ....
    :param info: encoderinfo
    :returns: tuple of(list of header items, optimized palette)

    """
    ...

def getdata(im, offset=..., **params):
    """
    Legacy Method

    Return a list of strings representing this image.
    The first string is a local image header, the rest contains
    encoded image data.

    :param im: Image object
    :param offset: Tuple of (x, y) pixels. Defaults to (0,0)
    :param \\**params: E.g. duration or other encoder info parameters
    :returns: List of Bytes containing gif encoded frame data

    """
    class Collector:
        ...
    
    

