"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

LUT_SIZE = 1 << 9
ROTATION_MATRIX = [6, 3, 0, 7, 4, 1, 8, 5, 2]
MIRROR_MATRIX = [2, 1, 0, 5, 4, 3, 8, 7, 6]
class LutBuilder:
    """A class for building a MorphLut from a descriptive language

      The input patterns is a list of a strings sequences like these::

          4:(...
             .1.
             111)->1

      (whitespaces including linebreaks are ignored). The option 4
      describes a series of symmetry operations (in this case a
      4-rotation), the pattern is described by:

      - . or X - Ignore
      - 1 - Pixel is on
      - 0 - Pixel is off

      The result of the operation is described after "->" string.

      The default is to return the current pixel value, which is
      returned if no other match is found.

      Operations:

      - 4 - 4 way rotation
      - N - Negate
      - 1 - Dummy op for no other operation (an op must always be given)
      - M - Mirroring

      Example::

          lb = LutBuilder(patterns = ["4:(... .1. 111)->1"])
          lut = lb.build_lut()

    """
    def __init__(self, patterns: Optional[Any] = ..., op_name: Optional[Any] = ...):
        self.lut = ...
    
    def add_patterns(self, patterns):
        ...
    
    def build_default_lut(self):
        self.lut = ...
    
    def get_lut(self):
        ...
    
    def _string_permute(self, pattern, permutation):
        """string_permute takes a pattern and a permutation and returns the
        string permuted according to the permutation list.
        """
        ...
    
    def _pattern_permute(self, basic_pattern, options, basic_result):
        """pattern_permute takes a basic pattern and its result and clones
        the pattern according to the modifications described in the $options
        parameter. It returns a list of all cloned patterns."""
        ...
    
    def build_lut(self):
        """Compile all patterns into a morphology lut.

        TBD :Build based on (file) morphlut:modify_lut
        """
        ...
    


class MorphOp:
    """A class for binary morphological operators"""
    def __init__(self, lut: Optional[Any] = ..., op_name: Optional[Any] = ..., patterns: Optional[Any] = ...):
        """Create a binary morphological operator"""
        self.lut = ...
    
    def apply(self, image):
        """Run a single morphological operation on an image

        Returns a tuple of the number of changed pixels and the
        morphed image"""
        ...
    
    def match(self, image):
        """Get a list of coordinates matching the morphological operation on
        an image.

        Returns a list of tuples of (x,y) coordinates
        of all matching pixels. See :ref:`coordinate-system`."""
        ...
    
    def get_on_pixels(self, image):
        """Get a list of all turned on pixels in a binary image

        Returns a list of tuples of (x,y) coordinates
        of all matching pixels. See :ref:`coordinate-system`."""
        ...
    
    def load_lut(self, filename):
        """Load an operator from an mrl file"""
        ...
    
    def save_lut(self, filename):
        """Save an operator to an mrl file"""
        ...
    
    def set_lut(self, lut):
        """Set the lut from an external source"""
        self.lut = ...
    


