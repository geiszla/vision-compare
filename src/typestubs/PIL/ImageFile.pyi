"""
This type stub file was generated by pyright.
"""

from . import Image
from typing import Any, Optional

MAXBLOCK = 65536
SAFEBLOCK = 1024 * 1024
LOAD_TRUNCATED_IMAGES = False
ERRORS = { - 1: "image buffer overrun error",- 2: "decoding error",- 3: "unknown error",- 8: "bad configuration",- 9: "out of memory error" }
def raise_ioerror(error):
    ...

def _tilesort(t):
    ...

class ImageFile(Image.Image):
    "Base class for image file format handlers."
    def __init__(self, fp: Optional[Any] = ..., filename: Optional[Any] = ...):
        self.custom_mimetype = ...
        self.tile = ...
        self.readonly = ...
        self.decoderconfig = ...
        self.decodermaxblock = ...
    
    def get_format_mimetype(self):
        ...
    
    def verify(self):
        """Check file integrity"""
        self.fp = ...
    
    def load(self):
        """Load image data based on tile list"""
        self.map = ...
        self.tile = ...
        self.readonly = ...
        self.fp = ...
    
    def load_prepare(self):
        ...
    
    def load_end(self):
        ...
    
    def _seek_check(self, frame):
        ...
    


class StubImageFile(ImageFile):
    """
    Base class for stub image loaders.

    A stub loader is an image loader that can identify files of a
    certain format, but relies on external code to load the file.
    """
    def _open(self):
        ...
    
    def load(self):
        self.__class__ = ...
        self.__dict__ = ...
    
    def _load(self):
        """(Hook) Find actual image loader."""
        ...
    


class Parser:
    """
    Incremental image parser.  This class implements the standard
    feed/close consumer interface.
    """
    incremental = ...
    image = ...
    data = ...
    decoder = ...
    offset = ...
    finished = ...
    def reset(self):
        """
        (Consumer) Reset the parser.  Note that you can only call this
        method immediately after you've created a parser; parser
        instances cannot be reused.
        """
        ...
    
    def feed(self, data):
        """
        (Consumer) Feed data to the parser.

        :param data: A string buffer.
        :exception IOError: If the parser failed to parse the image file.
        """
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, *args):
        ...
    
    def close(self):
        """
        (Consumer) Close the stream.

        :returns: An image object.
        :exception IOError: If the parser failed to parse the image file either
                            because it cannot be identified or cannot be
                            decoded.
        """
        ...
    


def _save(im, fp, tile, bufsize=...):
    """Helper to save image based on tile list

    :param im: Image object.
    :param fp: File object.
    :param tile: Tile list.
    :param bufsize: Optional buffer size
    """
    ...

def _safe_read(fp, size):
    """
    Reads large blocks in a safe way.  Unlike fp.read(n), this function
    doesn't trust the user.  If the requested size is larger than
    SAFEBLOCK, the file is read block by block.

    :param fp: File handle.  Must implement a <b>read</b> method.
    :param size: Number of bytes to read.
    :returns: A string containing up to <i>size</i> bytes of data.
    """
    ...

class PyCodecState:
    def __init__(self):
        self.xsize = ...
        self.ysize = ...
        self.xoff = ...
        self.yoff = ...
    
    def extents(self):
        ...
    


class PyDecoder:
    """
    Python implementation of a format decoder. Override this class and
    add the decoding logic in the `decode` method.

    See :ref:`Writing Your Own File Decoder in Python<file-decoders-py>`
    """
    _pulls_fd = ...
    def __init__(self, mode, *args):
        self.im = ...
        self.state = ...
        self.fd = ...
        self.mode = ...
    
    def init(self, args):
        """
        Override to perform decoder specific initialization

        :param args: Array of args items from the tile entry
        :returns: None
        """
        self.args = ...
    
    @property
    def pulls_fd(self):
        ...
    
    def decode(self, buffer):
        """
        Override to perform the decoding process.

        :param buffer: A bytes object with the data to be decoded.
        :returns: A tuple of (bytes consumed, errcode).
            If finished with decoding return <0 for the bytes consumed.
            Err codes are from `ERRORS`
        """
        ...
    
    def cleanup(self):
        """
        Override to perform decoder specific cleanup

        :returns: None
        """
        ...
    
    def setfd(self, fd):
        """
        Called from ImageFile to set the python file-like object

        :param fd: A python file-like object
        :returns: None
        """
        self.fd = ...
    
    def setimage(self, im, extents: Optional[Any] = ...):
        """
        Called from ImageFile to set the core output image for the decoder

        :param im: A core image object
        :param extents: a 4 tuple of (x0, y0, x1, y1) defining the rectangle
            for this tile
        :returns: None
        """
        self.im = ...
    
    def set_as_raw(self, data, rawmode: Optional[Any] = ...):
        """
        Convenience method to set the internal image from a stream of raw data

        :param data: Bytes to be set
        :param rawmode: The rawmode to be used for the decoder.
            If not specified, it will default to the mode of the image
        :returns: None
        """
        ...
    


