"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional

class ImageDraw:
    def __init__(self, im, mode: Optional[Any] = ...):
        """
        Create a drawing instance.

        :param im: The image to draw in.
        :param mode: Optional mode to use for color values.  For RGB
           images, this argument can be RGB or RGBA (to blend the
           drawing into the image).  For all other modes, this argument
           must be the same as the image mode.  If omitted, the mode
           defaults to the mode of the image.
        """
        self.im = ...
        self.draw = ...
        self.mode = ...
        self.fill = ...
        self.font = ...
    
    def getfont(self):
        """
        Get the current default font.

        :returns: An image font."""
        ...
    
    def _getink(self, ink, fill: Optional[Any] = ...):
        ...
    
    def arc(self, xy, start, end, fill: Optional[Any] = ..., width=...):
        """Draw an arc."""
        ...
    
    def bitmap(self, xy, bitmap, fill: Optional[Any] = ...):
        """Draw a bitmap."""
        ...
    
    def chord(self, xy, start, end, fill: Optional[Any] = ..., outline: Optional[Any] = ..., width=...):
        """Draw a chord."""
        ...
    
    def ellipse(self, xy, fill: Optional[Any] = ..., outline: Optional[Any] = ..., width=...):
        """Draw an ellipse."""
        ...
    
    def line(self, xy, fill: Optional[Any] = ..., width=..., joint: Optional[Any] = ...):
        """Draw a line, or a connected sequence of line segments."""
        ...
    
    def shape(self, shape, fill: Optional[Any] = ..., outline: Optional[Any] = ...):
        """(Experimental) Draw a shape."""
        ...
    
    def pieslice(self, xy, start, end, fill: Optional[Any] = ..., outline: Optional[Any] = ..., width=...):
        """Draw a pieslice."""
        ...
    
    def point(self, xy, fill: Optional[Any] = ...):
        """Draw one or more individual pixels."""
        ...
    
    def polygon(self, xy, fill: Optional[Any] = ..., outline: Optional[Any] = ...):
        """Draw a polygon."""
        ...
    
    def rectangle(self, xy, fill: Optional[Any] = ..., outline: Optional[Any] = ..., width=...):
        """Draw a rectangle."""
        ...
    
    def _multiline_check(self, text):
        """Draw text."""
        ...
    
    def _multiline_split(self, text):
        ...
    
    def text(self, xy, text, fill: Optional[Any] = ..., font: Optional[Any] = ..., anchor: Optional[Any] = ..., spacing=..., align=..., direction: Optional[Any] = ..., features: Optional[Any] = ..., language: Optional[Any] = ..., stroke_width=..., stroke_fill: Optional[Any] = ..., *args, **kwargs):
        ...
    
    def multiline_text(self, xy, text, fill: Optional[Any] = ..., font: Optional[Any] = ..., anchor: Optional[Any] = ..., spacing=..., align=..., direction: Optional[Any] = ..., features: Optional[Any] = ..., language: Optional[Any] = ..., stroke_width=..., stroke_fill: Optional[Any] = ...):
        ...
    
    def textsize(self, text, font: Optional[Any] = ..., spacing=..., direction: Optional[Any] = ..., features: Optional[Any] = ..., language: Optional[Any] = ..., stroke_width=...):
        """Get the size of a given string, in pixels."""
        ...
    
    def multiline_textsize(self, text, font: Optional[Any] = ..., spacing=..., direction: Optional[Any] = ..., features: Optional[Any] = ..., language: Optional[Any] = ..., stroke_width=...):
        ...
    


def Draw(im, mode: Optional[Any] = ...):
    """
    A simple 2D drawing interface for PIL images.

    :param im: The image to draw in.
    :param mode: Optional mode to use for color values.  For RGB
       images, this argument can be RGB or RGBA (to blend the
       drawing into the image).  For all other modes, this argument
       must be the same as the image mode.  If omitted, the mode
       defaults to the mode of the image.
    """
    ...

def getdraw(im: Optional[Any] = ..., hints: Optional[Any] = ...):
    """
    (Experimental) A more advanced 2D drawing interface for PIL images,
    based on the WCK interface.

    :param im: The image to draw in.
    :param hints: An optional list of hints.
    :returns: A (drawing context, drawing resource factory) tuple.
    """
    ...

def floodfill(image, xy, value, border: Optional[Any] = ..., thresh=...):
    """
    (experimental) Fills a bounded region with a given color.

    :param image: Target image.
    :param xy: Seed position (a 2-item coordinate tuple). See
        :ref:`coordinate-system`.
    :param value: Fill color.
    :param border: Optional border value.  If given, the region consists of
        pixels with a color different from the border color.  If not given,
        the region consists of pixels having the same color as the seed
        pixel.
    :param thresh: Optional threshold value which specifies a maximum
        tolerable difference of a pixel value from the 'background' in
        order for it to be replaced. Useful for filling regions of
        non-homogeneous, but similar, colors.
    """
    ...

def _color_diff(color1, color2):
    """
    Uses 1-norm distance to calculate difference between two values.
    """
    ...

